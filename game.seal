include './raylib.seal'
include './config.seal'
include './random.seal'
include math

const time = 5
var
  timer = time
  index = 4
  cursor_tick  = 0.6
  cursor_timer = 0
  cursor_color = colors.WHITE
  wildcards = 3
  lives = 3
  game_over = false

const time_bar = {
  pos  = vec2((WIDTH - 512) / 2, 20),
  size = vec2(512, 32)
}

var
  heart_tex = null
  restart_txt = {
    tex  = null,
    pos  = vec2(64, 256),
    time = 0
  }

define draw_time_bar(time_bar)
  // empty
  draw_rectangle(
    time_bar.pos.x,
    time_bar.pos.y,
    time_bar.size.x,
    time_bar.size.y,
    colors.BLACK
  )
  // filled
  draw_rectangle(
    time_bar.pos.x,
    time_bar.pos.y,
    time_bar.size.x * timer / time,
    time_bar.size.y,
    color(255, 30, 0, 255)
  )

extern define restart_game()
  timer = time
  index = 4
  cursor_timer = 0
  cursor_color = colors.WHITE
  wildcards = 3
  lives = 3
  game_over = false
  restart_txt.time = 0

extern define render_game(font)
  draw_time_bar(time_bar)
  const
    pos = vec2(WIDTH / 2, HEIGHT / 2 - 64)
    cp_pos = vec2(WIDTH / 2, HEIGHT / 2 - 64)
    font_size = 64
    spacing   = 16

  for i in index
    pos.x = pos.x - font_size / 2 - spacing
    if pos.x < 0 then stop

    draw_text_ex(
      font,
      PI[index - i - 1],
      vec2(pos.x - 8, pos.y + 8),
      font_size,
      0,
      color(0, 0, 0, 255)
    )

    draw_text_ex(
      font,
      PI[index - i - 1],
      pos,
      font_size,
      0,
      color(0, 255, 0, 255)
    )

  // cursor
  draw_rectangle(
    cp_pos.x,
    cp_pos.y + font_size - 8,
    font_size / 2,
    4,
    cursor_color
  )
  // wildcards
  draw_text_ex(
    font,
    format('wildcards:%/3', wildcards),
    vec2(500, 530),
    font_size / 2,
    0,
    color(0, 255, 0, 255)
  )
  // lives
  if heart_tex == null then heart_tex = load_texture('assets/heart.png')
  const life_pos = vec2(20, 512)
  for _ in lives
    draw_texture_ex(heart_tex, life_pos, 0, 4, color(0, 255, 0, 255))
    life_pos.x = life_pos.x + 84

  if game_over
    draw_rectangle(0, 0, WIDTH, HEIGHT, color(255, 0, 0, 40))
    if restart_txt.tex == null then restart_txt.tex = load_texture('assets/restarttxt.png')
    draw_texture_ex(
      restart_txt.tex,
      vec2(
        restart_txt.pos.x,
        restart_txt.pos.y + math:cos(restart_txt.time * 2) * 16
      ),
      0,
      1.5,
      color(255, 23, 0, 255)
    )

extern define update_game(dt)
  if game_over 
    restart_txt.time = restart_txt.time + dt
    return

  if (timer = timer - dt) <= 0
    game_over = true
    return

  const key = ascii(get_char_pressed())
  if key != null
    if key == PI[index]
      index = index + 1
      timer = time
    else if (lives = lives - 1) <= 0
      game_over = true
      return
  if is_key_pressed(keys.KEY_SPACE) and wildcards > 0
    wildcards = wildcards - 1
    index = index + 1
    timer = time
  if cursor_timer >= cursor_tick
    cursor_timer = 0
    cursor_color = if cursor_color == colors.EMPTY then colors.WHITE else colors.EMPTY
  else
    cursor_timer = cursor_timer + dt


define ascii(n)
  if n == 48 then return '0'
  if n == 49 then return '1'
  if n == 50 then return '2'
  if n == 51 then return '3'
  if n == 52 then return '4'
  if n == 53 then return '5'
  if n == 54 then return '6'
  if n == 55 then return '7'
  if n == 56 then return '8'
  if n == 57 then return '9'
  return null
